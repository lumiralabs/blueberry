{
  "name": "Task Manager",
  "description": "A task management application for users to manage their tasks, set due dates, categorize tasks, and collaborate with other users in real-time.",
  "features": [
    "User authentication and authorization",
    "Create, read, update, and delete (CRUD) operations for to-do tasks",
    "User-specific task management",
    "Real-time task updates",
    "Task categorization or tagging",
    "Due dates and reminders for tasks",
    "Collaboration features (adding other users to the task list)",
    "Data synchronization across multiple devices"
  ],
  "structure": {
    "pages": [
      {
        "path": "/",
        "description": "Home page with app introduction and login/register options.",
        "api_routes": [],
        "components": [
          "Header",
          "LoginForm",
          "RegistrationForm"
        ]
      },
      {
        "path": "/dashboard",
        "description": "User dashboard displaying their task lists and options to manage tasks.",
        "api_routes": [
          "/api/tasks",
          "/api/tasks?user_id",
          "/api/categories"
        ],
        "components": [
          "TaskList",
          "TaskForm",
          "CategoryList",
          "Profile"
        ]
      },
      {
        "path": "/task/[id]",
        "description": "Detailed view of a specific task allowing editing and collaboration features.",
        "api_routes": [
          "/api/tasks/[id]",
          "/api/comments",
          "/api/tasks/[id]/collaborators"
        ],
        "components": [
          "TaskDetail",
          "CommentSection",
          "CollaboratorList"
        ]
      },
      {
        "path": "/profile",
        "description": "User profile management page.",
        "api_routes": [
          "/api/user"
        ],
        "components": [
          "ProfileForm",
          "PasswordChangeForm"
        ]
      }
    ],
    "components": [
      {
        "name": "Header",
        "description": "Navigation bar with links to different pages and logout option.",
        "is_client": true
      },
      {
        "name": "LoginForm",
        "description": "Form for users to log in.",
        "is_client": true
      },
      {
        "name": "RegistrationForm",
        "description": "Form for new users to register.",
        "is_client": true
      },
      {
        "name": "TaskList",
        "description": "Displays a list of tasks for the user.",
        "is_client": true
      },
      {
        "name": "TaskForm",
        "description": "Form for creating or editing tasks.",
        "is_client": true
      },
      {
        "name": "CategoryList",
        "description": "Displays a list of task categories/tags.",
        "is_client": true
      },
      {
        "name": "Profile",
        "description": "Displays user's profile information.",
        "is_client": true
      },
      {
        "name": "TaskDetail",
        "description": "Detailed view of a specific task.",
        "is_client": true
      },
      {
        "name": "CommentSection",
        "description": "Allows users to add comments to tasks.",
        "is_client": true
      },
      {
        "name": "CollaboratorList",
        "description": "Lists all collaborators on a task.",
        "is_client": true
      },
      {
        "name": "ProfileForm",
        "description": "Form to update user's profile information.",
        "is_client": true
      },
      {
        "name": "PasswordChangeForm",
        "description": "Form to update user's password.",
        "is_client": true
      }
    ],
    "api_routes": [
      {
        "path": "/api/users",
        "method": "POST",
        "description": "Registers a new user.",
        "query": "INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id, username, email"
      },
      {
        "path": "/api/auth/login",
        "method": "POST",
        "description": "Authenticates a user and returns a JWT token.",
        "query": "SELECT * FROM users WHERE email = $1 AND password = $2"
      },
      {
        "path": "/api/auth/logout",
        "method": "POST",
        "description": "Logs out the user, invalidating their session.",
        "query": "Logs out user session"
      },
      {
        "path": "/api/tasks",
        "method": "GET",
        "description": "Fetches all tasks for a user.",
        "query": "SELECT * FROM tasks WHERE user_id = $1"
      },
      {
        "path": "/api/tasks",
        "method": "POST",
        "description": "Creates a new task.",
        "query": "INSERT INTO tasks (title, description, due_date, category_id, user_id) VALUES ($1, $2, $3, $4, $5)"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "PUT",
        "description": "Updates an existing task.",
        "query": "UPDATE tasks SET title = $1, description = $2, due_date = $3, category_id = $4 WHERE id = $5 AND user_id = $6"
      },
      {
        "path": "/api/tasks/[id]",
        "method": "DELETE",
        "description": "Deletes a task.",
        "query": "DELETE FROM tasks WHERE id = $1 AND user_id = $2"
      },
      {
        "path": "/api/comments",
        "method": "POST",
        "description": "Adds a comment to a task.",
        "query": "INSERT INTO comments (task_id, user_id, content) VALUES ($1, $2, $3)"
      },
      {
        "path": "/api/tasks/[id]/collaborators",
        "method": "POST",
        "description": "Adds a collaborator to a task.",
        "query": "INSERT INTO task_collaborators (task_id, user_id) VALUES ($1, $2)"
      },
      {
        "path": "/api/tasks/[id]/collaborators",
        "method": "GET",
        "description": "Fetches collaborators for a task.",
        "query": "SELECT * FROM task_collaborators WHERE task_id = $1"
      },
      {
        "path": "/api/categories",
        "method": "GET",
        "description": "Fetches all categories.",
        "query": "SELECT * FROM categories"
      },
      {
        "path": "/api/user",
        "method": "GET",
        "description": "Fetches current user's profile information.",
        "query": "SELECT * FROM users WHERE id = $1"
      },
      {
        "path": "/api/user",
        "method": "PUT",
        "description": "Updates user's profile information.",
        "query": "UPDATE users SET username = $1, email = $2 WHERE id = $3"
      },
      {
        "path": "/api/user/password",
        "method": "PUT",
        "description": "Updates user's password.",
        "query": "UPDATE users SET password = $2 WHERE id = $1"
      }
    ],
    "database": [
      {
        "name": "users",
        "schema": "CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(150) NOT NULL, email VARCHAR(255) UNIQUE NOT NULL, password TEXT NOT NULL)"
      },
      {
        "name": "tasks",
        "schema": "CREATE TABLE tasks (id SERIAL PRIMARY KEY, title VARCHAR(255) NOT NULL, description TEXT, due_date TIMESTAMP, category_id INT, user_id INT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id))"
      },
      {
        "name": "comments",
        "schema": "CREATE TABLE comments (id SERIAL PRIMARY KEY, task_id INT NOT NULL, user_id INT NOT NULL, content TEXT NOT NULL, FOREIGN KEY (task_id) REFERENCES tasks(id), FOREIGN KEY (user_id) REFERENCES users(id))"
      },
      {
        "name": "task_collaborators",
        "schema": "CREATE TABLE task_collaborators (task_id INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY (task_id, user_id), FOREIGN KEY (task_id) REFERENCES tasks(id), FOREIGN KEY (user_id) REFERENCES users(id))"
      },
      {
        "name": "categories",
        "schema": "CREATE TABLE categories (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL)"
      }
    ]
  }
}