{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"blueberry","text":""},{"location":"#setup","title":"Setup","text":"<pre><code>pip install git+https://github.com/lumiralabs/blueberry.git@main\n</code></pre> <p>Available Commands:</p> <ol> <li><pre><code>blueberry init &lt;name&gt; &lt;description&gt;\n</code></pre></li> </ol> <p>creates a folder structure with: <pre><code>&lt;name&gt;\n    - frontend\n        - pages/...\n        - api/...\n        - package.json\n    - supabase\n        - migration files\n</code></pre></p> <p>Examples: <pre><code>blueberry init todo_list_app \"A todo list app\"\n# ....\n# [clarify] asking user for more details\n# ....\n# [testing] running frontend tests\n# ....\n# [testing] running backend tests\n# ....\n# [testing] tests failed!! endpoint timeout\n# ....\n# [repair agent] looking at the logs and fixing the code\n# ....\n# [testing] running backend tests\n# ....\n# [testing] tests passed\n# ....\n# [verified]\n# ....\n# [operator / web-ui] using a web-ui agent to generate the google auth keys to set up the supabase auth\n# ....\n# [verified]\n# ....\n[deployed] here's the render deployment: https://todo-list-app.onrender.com\n[deployed] here's your deployment: https://todo-list-app.vercel.app\n</code></pre></p>"},{"location":"Spec_Gen/","title":"Spec Gen","text":"<p>The master agent will generate a spec file that will be used to generate the code. Throughout the project, the spec file will be updated with user flow, and be always validated by the verification tools.</p> <p>The master agent creates the following spec files:</p> <ol> <li> <p><code>frontend_spec.json</code> <pre><code>{\n    \"name\": \"frontend\",\n    \"description\": \"The frontend spec\",\n    \"components/pages\": [\n        {\n            \"name\": \"page\",\n            \"description\": \"The page spec\",\n            \"components\": []\n        }\n    ],\n    \"dependencies\": [],\n    \"package.json details\": {}\n}\n</code></pre></p> </li> <li> <p><code>backend_serving_spec.json</code> This is the OpenAPI spec that is either implemented in the nextjs logic as <code>/api</code> or in the backend with fastapi code. <pre><code>Here are more details:\n![Spec Generation Flow](images/spec-gen.png)\n</code></pre> {     \"/api/todos\": {         \"get\": {             \"description\": \"Get all todos\",             \"responses\": {                 \"200\": { \"description\": \"OK\" }             }         }     },     \"/api/todos/{id}\": {         \"get\": {             \"description\": \"Get a todo by id\",             \"responses\": {                 \"200\": { \"description\": \"OK\" }             }         }     } } ```</p> </li> </ol>"},{"location":"agents/","title":"Agents","text":"<p>We have the following agents:</p> <ol> <li>Master Agent</li> <li>understand intent</li> <li>creates spec</li> </ol> <pre><code>from blueberry.agents import MasterAgent\n\nmaster_agent = MasterAgent()\nintent = master_agent.understand_intent(\"I want to create a new project\")\n\n# verify with user the intent\nfinal_intent = master_agent.verify_with_user_loop(intent, max_attempts=3)\n\nspec = master_agent.create_spec(final_intent)\n</code></pre> <ol> <li></li> </ol>"},{"location":"base_scaffold/","title":"Base Scaffold","text":"<p>All our apps are built on top of a base scaffold.</p> <pre><code>&lt;name&gt;\n    - frontend\n        - pages/...\n        - api/...\n        - package.json\n    - supabase\n        - migration files\n</code></pre> <p>This ensures that all our apps are built on top of a consistent structure, and we can easily add new features to the base scaffold. The following files are pre-generated and edited by AI and the user on the go. We will be verifying that the code generated is always consistent with the base scaffold.</p> <ol> <li>package.json</li> <li>remix </li> <li>supabase auth</li> <li>google auth</li> <li>github auth</li> <li>secret <code>API_KEYS</code> management</li> </ol>"}]}