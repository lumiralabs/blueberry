{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"blueberry","text":"<p>Project Blueberry is a tool that helps you build full-stack apps with AI. It helps you plan, build, test and deploy your app. Product Building has never been so easy!</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install git+https://github.com/lumiralabs/blueberry\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-a-new-project","title":"Create a new project","text":"<pre><code>blueberry init &lt;name&gt; &lt;description&gt;\n</code></pre> <p>creates a folder structure with: <pre><code>&lt;name&gt;\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 pages/...\n\u2502   \u251c\u2500\u2500 api/...\n\u2502   \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 supabase/\n    \u2514\u2500\u2500 migration files\n</code></pre></p> <p>Examples: <pre><code>blueberry init todo_list_app \"A todo list app\"\n</code></pre></p> <pre><code># ....\n# [clarify] asking user for more details\n# ....\n# [testing] running frontend tests\n# ....\n# [testing] running backend tests\n# ....\n# [testing] tests failed!! endpoint timeout\n# ....\n# [repair agent] looking at the logs and fixing the code\n# ....\n# [testing] running backend tests\n# ....\n# [testing] tests passed\n# ....\n# [verified]\n# ....\n# [operator / web-ui] using a web-ui agent to generate the google auth keys to set up the supabase auth\n# ....\n# [verified]\n# ....\n[deployed] here's the render deployment: https://todo-list-app.onrender.com\n[deployed] here's your deployment: https://todo-list-app.vercel.app\n</code></pre>"},{"location":"#modify-an-existing-project","title":"Modify an existing project","text":"<pre><code>blueberry modify &lt;name&gt; &lt;change_description&gt;\n</code></pre> <pre><code>blueberry modify todo_list_app \"Add a new feature to the app\"\n</code></pre> <p>Ambitious Examples:</p> <ul> <li>a restaurant manangement and performance monitoring app, with a dashboard on the performance metrics, restaurant and a dashboard on the restaurant manager</li> </ul>"},{"location":"Spec_Gen/","title":"Spec Gen","text":"<p>The master agent will generate a spec file that will be used to generate the code. Throughout the project, the spec file will be updated with user flow, and be always validated by the verification tools.</p> <p>The master agent creates the following spec files:</p> <ol> <li> <p><code>frontend_spec.json</code> <pre><code>{\n    \"name\": \"frontend\",\n    \"description\": \"The frontend spec\",\n    \"components/pages\": [\n        {\n            \"name\": \"page\",\n            \"description\": \"The page spec\",\n            \"components\": []\n        }\n    ],\n    \"dependencies\": [],\n    \"package.json details\": {}\n}\n</code></pre></p> </li> <li> <p><code>backend_serving_spec.json</code> This is the OpenAPI spec that is either implemented in the nextjs logic as <code>/api</code> or in the backend with fastapi code. <pre><code>Here are more details:\n![Spec Generation Flow](images/spec-gen.png)\n</code></pre> {     \"/api/todos\": {         \"get\": {             \"description\": \"Get all todos\",             \"responses\": {                 \"200\": { \"description\": \"OK\" }             }         }     },     \"/api/todos/{id}\": {         \"get\": {             \"description\": \"Get a todo by id\",             \"responses\": {                 \"200\": { \"description\": \"OK\" }             }         }     } } ```</p> </li> </ol>"},{"location":"agents/","title":"Agents","text":"<p>We have the following agents:</p> <ol> <li>Master Agent</li> <li>understand intent</li> <li>creates spec</li> </ol> <pre><code>from blueberry.agents import MasterAgent\n\nmaster_agent = MasterAgent()\nintent = master_agent.understand_intent(\"I want to create a new project\")\n\n# verify with user the intent\nfinal_intent = master_agent.verify_with_user_loop(intent, max_attempts=3)\n\nspec = master_agent.create_spec(final_intent)\n</code></pre> <ol> <li></li> </ol>"},{"location":"base_scaffold/","title":"Base Scaffold","text":"<p>All our apps are built on top of a base scaffold. This ensures that all our apps are built on top of a consistent structure, and we can easily add new features to the base scaffold. The following files are pre-generated and edited by AI and the user on the go. We will be verifying that the code generated is always consistent with the base scaffold. Here is how to set up the base scaffold that just works:</p> <p><pre><code>blueberry base\n</code></pre> that basically sets up </p> <ol> <li>package.json</li> <li>remix </li> <li>supabase auth</li> <li>google auth</li> <li>github auth</li> <li>secret <code>API_KEYS</code> management</li> </ol> <p>and creates the following folder structure: <pre><code>&lt;name&gt;\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 pages/...\n\u2502   \u251c\u2500\u2500 api/...\n\u2502   \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 supabase/\n    \u2514\u2500\u2500 migration files\n</code></pre></p>"},{"location":"tests/","title":"Testing Blueberry","text":"<p>Here is how to test the project.</p>"}]}